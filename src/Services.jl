#==============================================================================#
# Services.jl
#
# This file is generated by AWSAPI.jl from service decriptions at:
# https://github.com/aws/aws-sdk-js/tree/master/apis
#==============================================================================#

module Services

using ..AWSCore

function acm(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "acm",
        version      = "2015-12-08",
        json_version = "1.1",
        target       = "CertificateManager",
        operation    = operation,
        args         = args)
end

function apigateway(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_json(
        aws;
        service      = "apigateway",
        version      = "2015-07-09",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function application_autoscaling(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "application-autoscaling",
        version      = "2016-02-06",
        endpoint     = "autoscaling",
        json_version = "1.1",
        target       = "AnyScaleFrontendService",
        operation    = operation,
        args         = args)
end

function appstream(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "appstream",
        version      = "2016-12-01",
        endpoint     = "appstream2",
        json_version = "1.1",
        target       = "PhotonAdminProxyService",
        operation    = operation,
        args         = args)
end

function athena(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "athena",
        version      = "2017-05-18",
        json_version = "1.1",
        target       = "AmazonAthena",
        operation    = operation,
        args         = args)
end

function autoscaling(aws::AWSConfig, operation, args)

    AWSCore.service_query(
        aws;
        service      = "autoscaling",
        version      = "2011-01-01",
        operation    = operation,
        args         = args)
end

function batch(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_json(
        aws;
        service      = "batch",
        version      = "2016-08-10",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function budgets(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "budgets",
        version      = "2016-10-20",
        json_version = "1.1",
        target       = "AWSBudgetServiceGateway",
        operation    = operation,
        args         = args)
end

function clouddirectory(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_json(
        aws;
        service      = "clouddirectory",
        version      = "2016-05-10",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function cloudformation(aws::AWSConfig, operation, args)

    AWSCore.service_query(
        aws;
        service      = "cloudformation",
        version      = "2010-05-15",
        operation    = operation,
        args         = args)
end

function cloudfront(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_xml(
        aws;
        service      = "cloudfront",
        version      = "2017-03-25",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function cloudhsm(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "cloudhsm",
        version      = "2014-05-30",
        json_version = "1.1",
        target       = "CloudHsmFrontendService",
        operation    = operation,
        args         = args)
end

function cloudsearch(aws::AWSConfig, operation, args)

    AWSCore.service_query(
        aws;
        service      = "cloudsearch",
        version      = "2013-01-01",
        operation    = operation,
        args         = args)
end

function cloudsearchdomain(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_json(
        aws;
        service      = "cloudsearch",
        version      = "2013-01-01",
        endpoint     = "cloudsearchdomain",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function cloudtrail(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "cloudtrail",
        version      = "2013-11-01",
        json_version = "1.1",
        target       = "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101",
        operation    = operation,
        args         = args)
end

function codebuild(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "codebuild",
        version      = "2016-10-06",
        json_version = "1.1",
        target       = "CodeBuild_20161006",
        operation    = operation,
        args         = args)
end

function codecommit(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "codecommit",
        version      = "2015-04-13",
        json_version = "1.1",
        target       = "CodeCommit_20150413",
        operation    = operation,
        args         = args)
end

function codedeploy(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "codedeploy",
        version      = "2014-10-06",
        json_version = "1.1",
        target       = "CodeDeploy_20141006",
        operation    = operation,
        args         = args)
end

function codepipeline(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "codepipeline",
        version      = "2015-07-09",
        json_version = "1.1",
        target       = "CodePipeline_20150709",
        operation    = operation,
        args         = args)
end

function codestar(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "codestar",
        version      = "2017-04-19",
        json_version = "1.1",
        target       = "CodeStar_20170419",
        operation    = operation,
        args         = args)
end

function cognito_identity(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "cognito-identity",
        version      = "2014-06-30",
        json_version = "1.1",
        target       = "AWSCognitoIdentityService",
        operation    = operation,
        args         = args)
end

function cognito_idp(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "cognito-idp",
        version      = "2016-04-18",
        json_version = "1.1",
        target       = "AWSCognitoIdentityProviderService",
        operation    = operation,
        args         = args)
end

function cognito_sync(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_json(
        aws;
        service      = "cognito-sync",
        version      = "2014-06-30",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function config(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "config",
        version      = "2014-11-12",
        json_version = "1.1",
        target       = "StarlingDoveService",
        operation    = operation,
        args         = args)
end

function cur(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "cur",
        version      = "2017-01-06",
        json_version = "1.1",
        target       = "AWSOrigamiServiceGatewayService",
        operation    = operation,
        args         = args)
end

function datapipeline(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "datapipeline",
        version      = "2012-10-29",
        json_version = "1.1",
        target       = "DataPipeline",
        operation    = operation,
        args         = args)
end

function dax(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "dax",
        version      = "2017-04-19",
        json_version = "1.1",
        target       = "AmazonDAXV3",
        operation    = operation,
        args         = args)
end

function devicefarm(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "devicefarm",
        version      = "2015-06-23",
        json_version = "1.1",
        target       = "DeviceFarm_20150623",
        operation    = operation,
        args         = args)
end

function directconnect(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "directconnect",
        version      = "2012-10-25",
        json_version = "1.1",
        target       = "OvertureService",
        operation    = operation,
        args         = args)
end

function discovery(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "discovery",
        version      = "2015-11-01",
        json_version = "1.1",
        target       = "AWSPoseidonService_V2015_11_01",
        operation    = operation,
        args         = args)
end

function dms(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "dms",
        version      = "2016-01-01",
        json_version = "1.1",
        target       = "AmazonDMSv20160101",
        operation    = operation,
        args         = args)
end

function ds(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "ds",
        version      = "2015-04-16",
        json_version = "1.1",
        target       = "DirectoryService_20150416",
        operation    = operation,
        args         = args)
end

function dynamodb(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "dynamodb",
        version      = "2012-08-10",
        json_version = "1.0",
        target       = "DynamoDB_20120810",
        operation    = operation,
        args         = args)
end

function ec2(aws::AWSConfig, operation, args)

    AWSCore.service_query(
        aws;
        service      = "ec2",
        version      = "2016-11-15",
        operation    = operation,
        args         = args)
end

function ecr(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "ecr",
        version      = "2015-09-21",
        json_version = "1.1",
        target       = "AmazonEC2ContainerRegistry_V20150921",
        operation    = operation,
        args         = args)
end

function ecs(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "ecs",
        version      = "2014-11-13",
        json_version = "1.1",
        target       = "AmazonEC2ContainerServiceV20141113",
        operation    = operation,
        args         = args)
end

function elasticache(aws::AWSConfig, operation, args)

    AWSCore.service_query(
        aws;
        service      = "elasticache",
        version      = "2015-02-02",
        operation    = operation,
        args         = args)
end

function elasticbeanstalk(aws::AWSConfig, operation, args)

    AWSCore.service_query(
        aws;
        service      = "elasticbeanstalk",
        version      = "2010-12-01",
        operation    = operation,
        args         = args)
end

function elasticfilesystem(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_json(
        aws;
        service      = "elasticfilesystem",
        version      = "2015-02-01",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function elasticloadbalancing(aws::AWSConfig, operation, args)

    AWSCore.service_query(
        aws;
        service      = "elasticloadbalancing",
        version      = "2012-06-01",
        operation    = operation,
        args         = args)
end

function elasticloadbalancingv2(aws::AWSConfig, operation, args)

    AWSCore.service_query(
        aws;
        service      = "elasticloadbalancing",
        version      = "2015-12-01",
        operation    = operation,
        args         = args)
end

function elasticmapreduce(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "elasticmapreduce",
        version      = "2009-03-31",
        json_version = "1.1",
        target       = "ElasticMapReduce",
        operation    = operation,
        args         = args)
end

function elastictranscoder(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_json(
        aws;
        service      = "elastictranscoder",
        version      = "2012-09-25",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function email(aws::AWSConfig, operation, args)

    AWSCore.service_query(
        aws;
        service      = "ses",
        version      = "2010-12-01",
        endpoint     = "email",
        operation    = operation,
        args         = args)
end

function entitlement_marketplace(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "aws-marketplace",
        version      = "2017-01-11",
        endpoint     = "entitlement.marketplace",
        json_version = "1.1",
        target       = "AWSMPEntitlementService",
        operation    = operation,
        args         = args)
end

function es(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_json(
        aws;
        service      = "es",
        version      = "2015-01-01",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function events(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "events",
        version      = "2015-10-07",
        json_version = "1.1",
        target       = "AWSEvents",
        operation    = operation,
        args         = args)
end

function firehose(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "firehose",
        version      = "2015-08-04",
        json_version = "1.1",
        target       = "Firehose_20150804",
        operation    = operation,
        args         = args)
end

function gamelift(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "gamelift",
        version      = "2015-10-01",
        json_version = "1.1",
        target       = "GameLift",
        operation    = operation,
        args         = args)
end

function glacier(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_json(
        aws;
        service      = "glacier",
        version      = "2012-06-01",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function greengrass(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_json(
        aws;
        service      = "greengrass",
        version      = "2017-06-07",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function health(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "health",
        version      = "2016-08-04",
        json_version = "1.1",
        target       = "AWSHealth_20160804",
        operation    = operation,
        args         = args)
end

function iam(aws::AWSConfig, operation, args)

    AWSCore.service_query(
        aws;
        service      = "iam",
        version      = "2010-05-08",
        operation    = operation,
        args         = args)
end

function importexport(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_query(
        aws;
        service      = "importexport",
        version      = "2010-06-01",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function inspector(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "inspector",
        version      = "2016-02-16",
        json_version = "1.1",
        target       = "InspectorService",
        operation    = operation,
        args         = args)
end

function iot(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_json(
        aws;
        service      = "execute-api",
        version      = "2015-05-28",
        endpoint     = "iot",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function iot_data(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_json(
        aws;
        service      = "iotdata",
        version      = "2015-05-28",
        endpoint     = "data.iot",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function kinesis(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "kinesis",
        version      = "2013-12-02",
        json_version = "1.1",
        target       = "Kinesis_20131202",
        operation    = operation,
        args         = args)
end

function kinesisanalytics(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "kinesisanalytics",
        version      = "2015-08-14",
        json_version = "1.1",
        target       = "KinesisAnalytics_20150814",
        operation    = operation,
        args         = args)
end

function kms(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "kms",
        version      = "2014-11-01",
        json_version = "1.1",
        target       = "TrentService",
        operation    = operation,
        args         = args)
end

function lambda(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_json(
        aws;
        service      = "lambda",
        version      = "2015-03-31",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function lex_models(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_json(
        aws;
        service      = "lex",
        version      = "2017-04-19",
        endpoint     = "models.lex",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function lightsail(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "lightsail",
        version      = "2016-11-28",
        json_version = "1.1",
        target       = "Lightsail_20161128",
        operation    = operation,
        args         = args)
end

function logs(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "logs",
        version      = "2014-03-28",
        json_version = "1.1",
        target       = "Logs_20140328",
        operation    = operation,
        args         = args)
end

function machinelearning(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "machinelearning",
        version      = "2014-12-12",
        json_version = "1.1",
        target       = "AmazonML_20141212",
        operation    = operation,
        args         = args)
end

function marketplacecommerceanalytics(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "marketplacecommerceanalytics",
        version      = "2015-07-01",
        json_version = "1.1",
        target       = "MarketplaceCommerceAnalytics20150701",
        operation    = operation,
        args         = args)
end

function meteringmarketplace(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "aws-marketplace",
        version      = "2016-01-14",
        endpoint     = "metering.marketplace",
        json_version = "1.1",
        target       = "AWSMPMeteringService",
        operation    = operation,
        args         = args)
end

function mobileanalytics(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_json(
        aws;
        service      = "mobileanalytics",
        version      = "2014-06-05",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function monitoring(aws::AWSConfig, operation, args)

    AWSCore.service_query(
        aws;
        service      = "monitoring",
        version      = "2010-08-01",
        operation    = operation,
        args         = args)
end

function mturk_requester(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "mturk-requester",
        version      = "2017-01-17",
        json_version = "1.1",
        target       = "MTurkRequesterServiceV20170117",
        operation    = operation,
        args         = args)
end

function opsworks(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "opsworks",
        version      = "2013-02-18",
        json_version = "1.1",
        target       = "OpsWorks_20130218",
        operation    = operation,
        args         = args)
end

function opsworkscm(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "opsworks-cm",
        version      = "2016-11-01",
        json_version = "1.1",
        target       = "OpsWorksCM_V2016_11_01",
        operation    = operation,
        args         = args)
end

function organizations(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "organizations",
        version      = "2016-11-28",
        json_version = "1.1",
        target       = "AWSOrganizationsV20161128",
        operation    = operation,
        args         = args)
end

function pinpoint(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_json(
        aws;
        service      = "mobiletargeting",
        version      = "2016-12-01",
        endpoint     = "pinpoint",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function polly(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_json(
        aws;
        service      = "polly",
        version      = "2016-06-10",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function rds(aws::AWSConfig, operation, args)

    AWSCore.service_query(
        aws;
        service      = "rds",
        version      = "2014-10-31",
        operation    = operation,
        args         = args)
end

function redshift(aws::AWSConfig, operation, args)

    AWSCore.service_query(
        aws;
        service      = "redshift",
        version      = "2012-12-01",
        operation    = operation,
        args         = args)
end

function rekognition(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "rekognition",
        version      = "2016-06-27",
        json_version = "1.1",
        target       = "RekognitionService",
        operation    = operation,
        args         = args)
end

function resourcegroupstaggingapi(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "tagging",
        version      = "2017-01-26",
        json_version = "1.1",
        target       = "ResourceGroupsTaggingAPI_20170126",
        operation    = operation,
        args         = args)
end

function route53(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_xml(
        aws;
        service      = "route53",
        version      = "2013-04-01",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function route53domains(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "route53domains",
        version      = "2014-05-15",
        json_version = "1.1",
        target       = "Route53Domains_v20140515",
        operation    = operation,
        args         = args)
end

function runtime_lex(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_json(
        aws;
        service      = "lex",
        version      = "2016-11-28",
        endpoint     = "runtime.lex",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function s3(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_xml(
        aws;
        service      = "s3",
        version      = "2006-03-01",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function sdb(aws::AWSConfig, operation, args)

    AWSCore.service_query(
        aws;
        service      = "sdb",
        version      = "2009-04-15",
        operation    = operation,
        args         = args)
end

function servicecatalog(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "servicecatalog",
        version      = "2015-12-10",
        json_version = "1.1",
        target       = "AWS242ServiceCatalogService",
        operation    = operation,
        args         = args)
end

function shield(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "shield",
        version      = "2016-06-02",
        json_version = "1.1",
        target       = "AWSShield_20160616",
        operation    = operation,
        args         = args)
end

function sms(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "sms",
        version      = "2016-10-24",
        json_version = "1.1",
        target       = "AWSServerMigrationService_V2016_10_24",
        operation    = operation,
        args         = args)
end

function snowball(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "snowball",
        version      = "2016-06-30",
        json_version = "1.1",
        target       = "AWSIESnowballJobManagementService",
        operation    = operation,
        args         = args)
end

function sns(aws::AWSConfig, operation, args)

    AWSCore.service_query(
        aws;
        service      = "sns",
        version      = "2010-03-31",
        operation    = operation,
        args         = args)
end

function sqs(aws::AWSConfig, operation, args)

    AWSCore.service_query(
        aws;
        service      = "sqs",
        version      = "2012-11-05",
        operation    = operation,
        args         = args)
end

function ssm(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "ssm",
        version      = "2014-11-06",
        json_version = "1.1",
        target       = "AmazonSSM",
        operation    = operation,
        args         = args)
end

function states(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "states",
        version      = "2016-11-23",
        json_version = "1.0",
        target       = "AWSStepFunctions",
        operation    = operation,
        args         = args)
end

function storagegateway(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "storagegateway",
        version      = "2013-06-30",
        json_version = "1.1",
        target       = "StorageGateway_20130630",
        operation    = operation,
        args         = args)
end

function streams_dynamodb(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "dynamodb",
        version      = "2012-08-10",
        endpoint     = "streams.dynamodb",
        json_version = "1.0",
        target       = "DynamoDBStreams_20120810",
        operation    = operation,
        args         = args)
end

function sts(aws::AWSConfig, operation, args)

    AWSCore.service_query(
        aws;
        service      = "sts",
        version      = "2011-06-15",
        operation    = operation,
        args         = args)
end

function support(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "support",
        version      = "2013-04-15",
        json_version = "1.1",
        target       = "AWSSupport_20130415",
        operation    = operation,
        args         = args)
end

function swf(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "swf",
        version      = "2012-01-25",
        json_version = "1.0",
        target       = "SimpleWorkflowService",
        operation    = operation,
        args         = args)
end

function waf(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "waf",
        version      = "2015-08-24",
        json_version = "1.1",
        target       = "AWSWAF_20150824",
        operation    = operation,
        args         = args)
end

function waf_regional(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "waf-regional",
        version      = "2016-11-28",
        json_version = "1.1",
        target       = "AWSWAF_Regional_20161128",
        operation    = operation,
        args         = args)
end

function workdocs(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_json(
        aws;
        service      = "workdocs",
        version      = "2016-05-01",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end

function workspaces(aws::AWSConfig, operation, args)

    AWSCore.service_json(
        aws;
        service      = "workspaces",
        version      = "2015-04-08",
        json_version = "1.1",
        target       = "WorkspacesService",
        operation    = operation,
        args         = args)
end

function xray(aws::AWSConfig, verb, resource, operation, args)

    AWSCore.service_rest_json(
        aws;
        service      = "xray",
        version      = "2016-04-12",
        verb         = verb,
        resource     = resource,
        operation    = operation,
        args         = args)
end


end # module Services

#==============================================================================#
# End of file
#==============================================================================#
